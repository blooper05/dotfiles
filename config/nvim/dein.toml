# Basic {{{1

[[plugins]]
repo = 'Shougo/dein.vim'

# View {{{1

[[plugins]]
repo = 'lifepillar/vim-solarized8'
hook_add = '''
  " Use solarized as colorscheme.
  autocmd MyAutoCmd VimEnter * nested colorscheme solarized8
  " Enable 24-bit RGB color in the TUI.
  set termguicolors
  " Assume a dark background.
  set background=dark
  " Make the background transparent.
  let g:solarized_termtrans = 1
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['gundo', 'gina.vim', 'defx.nvim', 'denite.nvim']
hook_add = '''
  " Get rid of redundant mode display.
  set noshowmode

  let g:lightline = {
      \ 'colorscheme' : 'solarized',
      \ 'mode_map'    : { 'c' : 'NORMAL' },
      \ 'active'      : {
      \   'left'      : [ [ 'mode', 'paste' ], [ 'gina', 'filename' ] ],
      \ },
      \ 'component_function' : {
      \   'modified'     : 'LightLineModified',
      \   'readonly'     : 'LightLineReadonly',
      \   'gina'         : 'LightLineGina',
      \   'filename'     : 'LightLineFilename',
      \   'fileformat'   : 'LightLineFileformat',
      \   'filetype'     : 'LightLineFiletype',
      \   'fileencoding' : 'LightLineFileencoding',
      \   'mode'         : 'LightLineMode',
      \ },
      \ 'separator'    : { 'left' : "\ue0b0", 'right' : "\ue0b2" },
      \ 'subseparator' : { 'left' : "\ue0b1", 'right' : "\ue0b3" },
      \ }

  function! LightLineModified()
    return &ft =~ 'help\|gundo\|diff' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadonly()
    return &ft !~? 'help\|gundo\|diff' && &readonly ? "\ue0a2" : ''
  endfunction

  function! LightLineGina()
    if &ft !~? 'help\|gundo\|diff' && exists('g:loaded_gina')
      let branch = gina#component#repo#branch()
      return branch !=# '' ? "\ue0a0 ".branch : ''
    endif
    return ''
  endfunction

  function! LightLineFilename()
    let fname = expand('%:t')
    return fname =~ '__Gundo' ? '' :
         \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
         \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
         \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightLineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
    let fname = expand('%:t')
    return fname =~ '__Gundo' ? 'Gundo' :
         \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction
'''

# Completion {{{1

[[plugins]]
repo = 'Shougo/deoplete.nvim'
build = 'pip3 install neovim'
depends = ['context_filetype.vim']
on_i = 1
hook_source = '''
  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  " Use smartcase.
  call deoplete#custom#option('smart_case', v:true)
  " <CR>: close popup and save indent.
  inoremap <silent><CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function() abort
    return deoplete#close_popup() . "\<CR>"
  endfunction
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim' # TODO: deoppet.nvim
depends = ['context_filetype.vim', 'neosnippet-snippets']
on_ft = 'snippet'
hook_add = '''
  " Plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  " Enable snipMate compatibility feature.
  let g:neosnippet#enable_snipmate_compatibility = 1
  " Expand the function prototype.
  let g:neosnippet#enable_completed_snippet = 1
  " Expand snippets by a word boundary.
  let g:neosnippet#expand_word_boundary = 1
  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
     \ "\<Plug>(neosnippet_expand_or_jump)" :
     \ pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
     \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets' # TODO: deoppet-snippets
on_source = 'neosnippet.vim'

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

# TextObject {{{1

[[plugins]]
repo = 'bkad/CamelCaseMotion'
on_map = '<Plug>CamelCaseMotion_'
hook_add = '''
  " Plugin key-mappings.
  map <silent>w  <Plug>CamelCaseMotion_w
  map <silent>b  <Plug>CamelCaseMotion_b
  map <silent>e  <Plug>CamelCaseMotion_e
  map <silent>ge <Plug>CamelCaseMotion_ge
  sunmap w
  sunmap b
  sunmap e
  sunmap ge
  omap <silent>iw <Plug>CamelCaseMotion_iw
  xmap <silent>iw <Plug>CamelCaseMotion_iw
  omap <silent>ib <Plug>CamelCaseMotion_ib
  xmap <silent>ib <Plug>CamelCaseMotion_ib
  omap <silent>ie <Plug>CamelCaseMotion_ie
  xmap <silent>ie <Plug>CamelCaseMotion_ie
'''

[[plugins]]
repo = 'vim-scripts/matchit.zip'
on_map = '%'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_map = '-'
hook_add = '''
  " Plugin key-mappings.
  let g:switch_mapping = '-'
'''

[[plugins]]
repo = 'kana/vim-operator-user'
on_source = 'rhysd/vim-operator-surround'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['vim-operator-user']
on_map = '<Plug>'
hook_add = '''
  " Plugin key-mappings.
  omap <silent>s <Plug>(operator-surround-append)
  xmap <silent>s <Plug>(operator-surround-append)
  map <silent>ds <Plug>(operator-surround-delete)a
  map <silent>cs <Plug>(operator-surround-replace)a
'''

# Util {{{1

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'
hook_add = '''
  " Plugin key-mappings.
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
  nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_map = ['gc', 'g<', 'g>']

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
  " Plugin key-mappings.
  xmap <silent><Enter> <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'sjl/gundo.vim'
build = 'pip2 install neovim'
on_cmd = 'Gundo'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent><Space>U :<C-u>GundoToggle<CR>
'''

# File {{{1

[[plugins]]
repo = 'Shougo/deol.nvim'
on_map = '<Plug>'
hook_add = '''
  " The prefix key.
  nnoremap [deol]   <Nop>
  nmap     <Space>s [deol]
  " Plugin key-mappings.
  nnoremap <silent>[deol]n :<C-u>call deol#new({ 'command': 'zsh' })<CR><CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim' # TODO: defx.nvim
on_map = '<Plug>'
hook_add = '''
  " The prefix key.
  nnoremap [filer]  <Nop>
  nmap     <Space>f [filer]
  " Plugin key-mappings.
  nnoremap <silent>[filer]n :<C-u>VimFilerBufferDir<CR>
  nnoremap <silent>[filer]c :<C-u>VimFilerCurrentDir<CR>
  nnoremap <silent>[filer]e :<C-u>VimFilerExplorer<CR>
  " Use vimfiler as default explorer.
  let g:vimfiler_as_default_explorer = 1
  " Enable file operation commands.
  let g:vimfiler_safe_mode_by_default = 0
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'vim-denite-ghq', 'unite.vim', 'denite-rails']
on_cmd = 'Denite'
hook_add = '''
  " The prefix key.
  nnoremap [denite] <Nop>
  nmap     <Space>u [denite]
  " Plugin key-mappings.
  nnoremap <silent>[denite]f :<C-u>Denite file_rec -default-action=tabswitch<CR>
  nnoremap <silent>[denite]g :<C-u>Denite grep -auto-preview -default-action=tabswitch -vertical-preview<CR>
  nnoremap <silent>[denite]b :<C-u>Denite buffer -default-action=tabswitch<CR>
  nnoremap <silent>[denite]r :<C-u>Denite register<CR>
  nnoremap <silent>[denite]o :<C-u>Denite outline<CR>
  nnoremap <silent>[denite]H :<C-u>Denite help<CR>
'''
hook_source = '''
  " " Plugin key-mappings.
  " call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  " call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
  " Use rg in denite sources.
  if executable('rg')
    call denite#custom#var('file_rec', 'command',
          \ ['rg', '--files', '--glob', '!.git', ''])
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts',
          \ ['--vimgrep', '--no-heading'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[denite]mf :<C-u>Denite file_mru -default-action=tabswitch<CR>
'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[denite]s :<C-u>Denite ghq<CR>
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['vim-ref-ri', 'unite-codic.vim']
on_source = 'denite.nvim'

# Runner {{{1

[[plugins]]
repo = 'w0rp/ale'
on_event = 'BufWritePost'
hook_add = '''
  " Never check buffers on changes.
  let g:ale_lint_on_text_changed = 'never'
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'

[[plugins]]
repo = 'vim-scripts/sudo.vim'
on_cmd = ['SudoRead', 'SudoWrite']

# FIXME
[[plugins]]
repo = 'janko-m/vim-test'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent><Leader>c :<C-u>TestFile<CR>
  nnoremap <silent><Leader>n :<C-u>TestNearest<CR>
  nnoremap <silent><Leader>l :<C-u>TestLast<CR>
  nnoremap <silent><Leader>a :<C-u>TestSuite<CR>
  " Runs test commands with `:Dispatch`.
  let test#strategy = 'dispatch'
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

# Git {{{1

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
  " The prefix key.
  nnoremap [git]    <Nop>
  nmap     <Space>g [git]
  " Plugin key-mappings.
  nnoremap <silent>[git]a :<C-u>Gina add --ignore-errors -- %<CR>
  nnoremap <silent>[git]r :<C-u>Gina reset --quiet -- %<CR>
  nnoremap <silent>[git]b :<C-u>Gina blame<CR>
  nnoremap <silent>[git]B :<C-u>Gina branch<CR>
  nnoremap <silent>[git]c :<C-u>Gina commit<CR>
  nnoremap <silent>[git]l :<C-u>Gina log<CR>
  nnoremap <silent>[git]f :<C-u>Gina log -- %<CR>
  nnoremap <silent>[git]d :<C-u>Gina patch<CR>
  nnoremap <silent>[git]R :<C-u>Gina reflog<CR>
  nnoremap <silent>[git]s :<C-u>Gina status<CR>
  " gina-buffer-blame specific settings.
  let g:gina#command#blame#formatter#format = '%au%= on %ti %ma%in'
  let g:gina#command#blame#formatter#timestamp_months = 0
  let g:gina#command#blame#formatter#timestamp_format1 = '%Y-%m-%d'
  let g:gina#command#blame#formatter#timestamp_format2 = '%Y-%m-%d'
  let g:gina#command#blame#use_default_mappings = 0
  call gina#custom#mapping#nmap('blame', '<CR>', '<Plug>(gina-show-commit-split)')
  " gina-buffer-branch specific settings.
  let g:gina#command#branch#use_default_mappings = 0
  call gina#custom#mapping#nmap('branch', 'co', '<Plug>(gina-commit-checkout)')
  call gina#custom#mapping#nmap('branch', 'ct', '<Plug>(gina-commit-checkout-track)')
  call gina#custom#mapping#nmap('branch', 'M',  '<Plug>(gina-branch-move)')
  call gina#custom#mapping#nmap('branch', 'D',  '<Plug>(gina-branch-delete)')
  call gina#custom#command#option('branch', '--all')
  call gina#custom#command#option('branch', '--opener', 'split')
  call gina#custom#command#option('branch', '--group', 'gina-branch-viewer')
  " gina-buffer-commit specific settings.
  call gina#custom#command#option('commit', '--opener', 'split')
  call gina#custom#command#option('commit', '--group', 'gina-commit-viewer')
  " gina-buffer-log specific settings.
  call gina#custom#command#option('log', '--graph')
  call gina#custom#command#option('log', '--opener', 'vsplit')
  call gina#custom#command#option('log', '--group', 'gina-log-viewer')
  " gina-buffer-patch specific settings.
  call gina#custom#command#option('patch', '--oneside')
  " gina-buffer-reflog specific settings.
  call gina#custom#command#option('reflog', '--opener', 'vsplit')
  call gina#custom#command#option('reflog', '--group', 'gina-reflog-viewer')
  " gina-buffer-status specific settings.
  call gina#custom#command#option('status', '--short')
  call gina#custom#command#option('status', '--opener', 'split')
  call gina#custom#command#option('status', '--group', 'gina-status-viewer')
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  " Plugin key-mappings.
  let g:gitgutter_map_keys = 0
'''

# FileType {{{1

# General {{{2
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_source = 'vim-precious'

[[plugins]]
repo = 'thinca/vim-ref'
depends = ['vim-ref-ri']

# Ruby {{{2
[[plugins]]
repo = 'osyo-manga/vim-monster'
on_ft = 'ruby'
hook_add = '''
  " FIXME
  let g:monster#completion#solargraph#backend = 'async_solargraph_suggest'
  let g:deoplete#sources#omni#input_patterns = {
  \   'ruby' : '[^. *\t]\.\|\h\w*::',
  \}
'''

[[plugins]]
repo = 'killphi/vim-ruby-refactoring'
on_ft = 'ruby'

[[plugins]]
repo = 'yuku-t/vim-ref-ri'
on_source = ['vim-ref', 'unite.vim']
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[denite]R :<C-u>Denite unite:ref/ri<CR>
'''

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo = '5t111111/denite-rails'
on_ft = 'ruby'
on_source = 'denite.nvim'
hook_add = '''
  " The prefix key.
  nnoremap [rails]  <Nop>
  nmap     <Space>r [rails]
  " Plugin key-mappings.
  nnoremap <silent>[rails]r :<C-u>Denite rails:dwim<CR>
  nnoremap <silent>[rails]m :<C-u>Denite rails:model<CR>
  nnoremap <silent>[rails]v :<C-u>Denite rails:view<CR>
  nnoremap <silent>[rails]c :<C-u>Denite rails:controller<CR>
  nnoremap <silent>[rails]h :<C-u>Denite rails:helper<CR>
  nnoremap <silent>[rails]t :<C-u>Denite rails:test<CR>
'''

[[plugins]]
repo = 'Keithbsmiley/rspec.vim'
on_ft = 'ruby'

# Go {{{2
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_post_update = '''
  " Update Go tool binaries
  execute 'GoUpdateBinaries'
'''

# HTML {{{2
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'eruby', 'haml', 'slim']

[[plugins]]
repo = 'tpope/vim-haml'
on_ft = 'haml'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

# JavaScript {{{2
[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = 'javascript'

[[plugins]]
repo = 'jiangmiao/simple-javascript-indenter'
on_ft = 'javascript'
hook_add = '''
  " Use brief mode.
  let g:SimpleJsIndenter_BriefMode = 1
  " The some more smart case indent.
  let g:SimpleJsIndenter_CaseIndentLevel = -1
'''

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

# Elm {{{2
[[plugins]]
repo = 'elmcast/elm-vim'
on_ft = 'elm'

# Markdown {{{2
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  " Disable conceal regardless of 'conceallevel' setting.
  let g:vim_markdown_conceal = 0
  " Disable the folding configuration.
  let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'previm/previm'
depends = ['open-browser.vim']
on_cmd = 'PrevimOpen'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent><Leader>p :<C-u>PrevimOpen<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

# English {{{2
[[plugins]]
repo = 'ujihisa/neco-look'
on_source = 'deoplete.nvim'

[[plugins]]
repo = 'koron/codic-vim'
depends = ['unite-codic.vim']

[[plugins]]
repo = 'rhysd/unite-codic.vim'
on_source = 'codic-vim'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[denite]C :<C-u>Denite unite:codic<CR>
'''

# Others {{{2
[[plugins]]
repo = 'mechatroner/rainbow_csv'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = 'Dockerfile'

[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = 'nginx'

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = 'terraform'
hook_add = '''
  " Override indentation syntax for matching files.
  let g:terraform_align = 1
  " Run terraform fmt automatically when saving files.
  let g:terraform_fmt_on_save = 1
'''

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = 'yaml'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'darfink/vim-plist'
on_ft = 'xml'

# Service {{{1

# FIXME
# [[plugins]]
# repo = 'rhysd/github-complete.vim'
# hook_add = '''
#   " Use neocomplete.
#   let g:github_complete_enable_neocomplete = 1
# '''

# FIXME
# [[plugins]]
# repo = 'kakkyz81/evervim'
# build = 'pip2 install markdown'
# hook_add = '''
#   " The prefix key.
#   nnoremap [evervim] <Nop>
#   nmap     <Space>e  [evervim]
#   " Plugin key-mappings.
#   nnoremap <silent>[evervim]l :<C-u>EvervimNotebookList<CR>
#   nnoremap <silent>[evervim]c :<C-u>EvervimCreateNote<CR>
#   nnoremap         [evervim]s :<C-u>EvervimSearchByQuery<Space>
#   " Set the work path.
#   let g:evervim_workdir = expand('~/.cache/evervim')
#   " Set Evernote developer token.
#   let g:evervim_devtoken = $EVERNOTE_DEVTOKEN
# '''

# Folding {{{1

# vim:set foldmethod=marker:
