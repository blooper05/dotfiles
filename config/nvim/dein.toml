# TODO: denite.nvim
# TODO: deol.nvim

# Basic {{{1

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# View {{{1

[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  " let g:solarized_termcolors = 256
  let g:solarized_bold = 0
  let g:solarized_italic = 0
  let g:solarized_underline = 0
  " let g:solarized_visibility = 'low'
  set background=dark
  au MyAutoCmd VimEnter * nested colorscheme solarized
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive', 'vimfiler.vim', 'vimshell.vim', 'unite.vim', 'gundo']
hook_add = '''
  let g:lightline = {
      \ 'colorscheme' : 'solarized',
      \ 'mode_map'    : { 'c' : 'NORMAL' },
      \ 'active'      : {
      \   'left'      : [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ],
      \ },
      \ 'component_function' : {
      \   'modified'     : 'LightLineModified',
      \   'readonly'     : 'LightLineReadonly',
      \   'fugitive'     : 'LightLineFugitive',
      \   'filename'     : 'LightLineFilename',
      \   'fileformat'   : 'LightLineFileformat',
      \   'filetype'     : 'LightLineFiletype',
      \   'fileencoding' : 'LightLineFileencoding',
      \   'mode'         : 'LightLineMode',
      \ },
      \ 'separator'    : { 'left' : '⮀', 'right' : '⮂' },
      \ 'subseparator' : { 'left' : '⮁', 'right' : '⮃' },
      \ }

  function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
         \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
         \  &ft == 'unite' ? unite#get_status_string() :
         \  &ft == 'vimshell' ? vimshell#get_status_string() :
         \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
         \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
      let branch = fugitive#head()
      return branch !=# '' ? '⭠ '.branch : ''
    endif
    return ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightLineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

# Completion {{{1

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
build = 'pip3 install neovim'
on_i = 1
hook_add = '''
  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  " Use smartcase.
  let g:deoplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:deoplete#auto_complete_start_length = 2
  " <CR>: close popup and save indent.
  inoremap <silent><CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function() abort
    return deoplete#close_popup() . "\<CR>"
  endfunction
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = 'snippet'
hook_add = '''
  " Plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
     \ "\<Plug>(neosnippet_expand_or_jump)" :
     \ pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
     \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = 'neosnippet.vim'

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_i = 1

[[plugins]]
repo = 'tpope/vim-endwise'
on_i = 1

# TextObject {{{1

[[plugins]]
repo = 'bkad/CamelCaseMotion'
on_map = '<Plug>CamelCaseMotion_'
hook_add = '''
  " Plugin key-mappings.
  map <silent>w  <Plug>CamelCaseMotion_w
  map <silent>b  <Plug>CamelCaseMotion_b
  map <silent>e  <Plug>CamelCaseMotion_e
  map <silent>ge <Plug>CamelCaseMotion_ge
  sunmap w
  sunmap b
  sunmap e
  sunmap ge
  omap <silent>iw <Plug>CamelCaseMotion_iw
  xmap <silent>iw <Plug>CamelCaseMotion_iw
  omap <silent>ib <Plug>CamelCaseMotion_ib
  xmap <silent>ib <Plug>CamelCaseMotion_ib
  omap <silent>ie <Plug>CamelCaseMotion_ie
  xmap <silent>ie <Plug>CamelCaseMotion_ie
'''

[[plugins]]
repo = 'vim-scripts/matchit.zip'
on_map = '%'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_map = '-'
hook_add = '''
  " Plugin key-mappings.
  let g:switch_mapping = '-'
'''

[[plugins]]
repo = 'anyakichi/vim-surround'
depends = 'vim-repeat'
on_map = ['cs', 'ds', ['v', 's']]

# Util {{{1

[[plugins]]
repo = 'tpope/vim-repeat'
on_map = '.'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'
hook_add = '''
  " Plugin key-mappings.
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
  nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_map = ['gc', 'g<', 'g>']

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
  " Plugin key-mappings.
  xmap <silent><Enter> <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'sjl/gundo.vim'
build = 'pip install neovim'
on_cmd = 'Gundo'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent><Space>U :<C-u>GundoToggle<CR>
'''

# File {{{1

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_map = '<Plug>'
hook_add = '''
  " The prefix key.
  nnoremap [shell]  <Nop>
  nmap     <Space>s [shell]
  " Plugin key-mappings.
  nnoremap <silent>[shell]t :<C-u>VimShellTab -create<CR>
  nnoremap <silent>[shell]c :<C-u>VimShellCreate -popup<CR>
  nnoremap <silent>[shell]n :<C-u>VimShellBufferDir -popup<CR>
  nnoremap <silent>[shell]i :<C-u>VimShellInteractive rails c<CR>
  " Prompt settings.
  let g:vimshell_prompt_expr = 'getcwd()." > "'
  let g:vimshell_prompt_pattern = '^\f\+ > '
  " Set the setting file path.
  let g:vimshell_vimshrc_path = $XDG_CONFIG_HOME . '/nvim/vimshrc'
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
on_map = '<Plug>'
hook_add = '''
  " The prefix key.
  nnoremap [filer]  <Nop>
  nmap     <Space>f [filer]
  " Plugin key-mappings.
  nnoremap <silent>[filer]c :<C-u>VimFilerCreate<CR>
  nnoremap <silent>[filer]n :<C-u>VimFilerBufferDir<CR>
  " Use vimfiler as default explorer.
  let g:vimfiler_as_default_explorer = 1
  " Enable file operation commands.
  let g:vimfiler_safe_mode_by_default = 0
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim', 'unite-outline', 'unite-ghq', 'unite-help', 'vim-ref-ri', 'unite-rails', 'unite-codic.vim']
on_map = '<Plug>'
hook_add = '''
  " The prefix key.
  nnoremap [unite]  <Nop>
  nmap     <Space>u [unite]
  " Plugin key-mappings.
  nnoremap <silent>[unite]f  :<C-u>UniteWithBufferDir -buffer-name=files file file/new directory/new<CR>
  nnoremap <silent>[unite]p  :<C-u>Unite file_rec/git:--cached:--others:--exclude-standard<CR>
  nnoremap <silent>[unite]g  :<C-u>Unite grep<CR>
  nnoremap <silent>[unite]b  :<C-u>Unite buffer<CR>
  nnoremap <silent>[unite]r  :<C-u>Unite register<CR>
  nnoremap <silent>[unite]M  :<C-u>Unite mapping<CR>
  autocmd FileType unite call s:my_unite_setting()
  function! s:my_unite_setting()
    imap <buffer>jj    <Plug>(unite_insert_leave)
    imap <buffer><C-w> <Plug>(unite_delete_backward_path)
  endfunction
  " Use start insert by default.
  call unite#custom#profile('default', 'context', {
       \ 'start_insert' : 1,
       \ })
  " Use tabswitch by default.
  call unite#custom#default_action('file', 'tabswitch')
  call unite#custom#default_action('buffer', 'tabswitch')
  " Keep the focus in grep unite source.
  call unite#custom#profile('source/grep', 'context', {
       \ 'no_quit'    : 1,
       \ 'keep_focus' : 1,
       \ })
  " Use pt in unite grep source.
  if executable('pt')
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor'
    let g:unite_source_grep_recursive_opt = ''
  endif
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'unite.vim'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[unite]mf :<C-u>Unite file_mru<CR>
  nnoremap <silent>[unite]md :<C-u>Unite directory_mru<CR>
'''

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[unite]o  :<C-u>Unite outline<CR>
'''

[[plugins]]
repo = 'sorah/unite-ghq'
on_source = 'unite.vim'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[unite]s  :<C-u>Unite ghq<CR>
'''

[[plugins]]
repo = 'tsukkee/unite-help'
on_source = 'unite.vim'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[unite]H  :<C-u>Unite help<CR>
'''

# Runner {{{1

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  " Disable syntastic checks on quit.
  let g:syntastic_check_on_wq = 0
  " Use the :sign interface to note errors.
  let g:syntastic_enable_signs = 1
  " Automatically open and close the location list.
  let g:syntastic_auto_loc_list = 2
  " Set syntax checkers.
  let g:syntastic_sh_checkers = ['shellcheck']
  let g:syntastic_ruby_checkers = ['rubocop']
'''

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'janko-m/vim-test'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent><Leader>c :<C-u>TestFile<CR>
  nnoremap <silent><Leader>n :<C-u>TestNearest<CR>
  nnoremap <silent><Leader>l :<C-u>TestLast<CR>
  nnoremap <silent><Leader>a :<C-u>TestSuite<CR>
  " Runs test commands with `:Dispatch`.
  let test#strategy = 'dispatch'
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

# Git {{{1

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  " The prefix key.
  nnoremap [git]    <Nop>
  nmap     <Space>g [git]
  " Plugin key-mappings.
  nnoremap <silent>[git]s :<C-u>Gstatus<CR>
  nnoremap <silent>[git]d :<C-u>Gdiff<CR>
  nnoremap <silent>[git]a :<C-u>Gwrite<CR>
  nnoremap <silent>[git]c :<C-u>Gcommit<CR>
  nnoremap <silent>[git]r :<C-u>Gread<CR>
  nnoremap <silent>[git]b :<C-u>Gblame<CR>
'''

[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[git]l :<C-u>Agit<CR>
  nnoremap <silent>[git]f :<C-u>AgitFile<CR>
  autocmd FileType agit call s:my_agit_setting()
  function! s:my_agit_setting()
    nmap <buffer>cp <Plug>(agit-git-cherry-pick)
    nmap <buffer>rv <Plug>(agit-git-revert)
  endfunction
'''

[[plugins]]
repo = 'idanarye/vim-merginal'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[git]B :<C-u>MerginalToggle<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

# FileType {{{1

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'thinca/vim-ref'
depends = ['vim-ref-ri']

# [[plugins]]
# repo = 'osyo-manga/vim-monster'
# on_ft = 'ruby'
# hook_add = '''
#   " Set async completion.
#   let g:monster#completion#rcodetools#backend = 'async_rct_complete'
#   " Use deoplete.nvim.
#   let g:deoplete#sources#omni#input_patterns = {
#     \ 'ruby' : '[^. *\t]\.\w*\|\h\w*::',
#     \ }
# '''

[[plugins]]
repo = 'Shougo/deoplete-rct'
on_ft = 'ruby'

[[plugins]]
repo = 'yuku-t/vim-ref-ri'
on_source = 'vim-ref'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[unite]R  :<C-u>Unite ref/ri<CR>
'''

[[plugins]]
repo = 'tpope/vim-rails'
# on_ft = 'ruby'

[[plugins]]
repo = 'basyura/unite-rails'
# on_ft = 'ruby'
on_source = 'unite.vim'
hook_add = '''
  " The prefix key.
  nnoremap [rails]  <Nop>
  nmap     <Space>r [rails]
  " Plugin key-mappings.
  nnoremap <silent>[rails]m :<C-u>Unite rails/model<CR>
  nnoremap <silent>[rails]v :<C-u>Unite rails/view<CR>
  nnoremap <silent>[rails]c :<C-u>Unite rails/controller<CR>
  nnoremap <silent>[rails]h :<C-u>Unite rails/helper<CR>
  nnoremap <silent>[rails]s :<C-u>Unite rails/spec<CR>
  nnoremap <silent>[rails]C :<C-u>Unite rails/config<CR>
  nnoremap <silent>[rails]l :<C-u>Unite rails/log<CR>
'''

[[plugins]]
repo = 'Keithbsmiley/rspec.vim'
on_ft = 'ruby'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'

[[plugins]]
repo = 'tpope/vim-haml'
on_ft = 'haml'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = 'javascript'

[[plugins]]
repo = 'jiangmiao/simple-javascript-indenter'
on_ft = 'javascript'
hook_add = '''
  " Use brief mode.
  let g:SimpleJsIndenter_BriefMode = 1
  " The some more smart case indent.
  let g:SimpleJsIndenter_CaseIndentLevel = -1
'''

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  augroup MarkdownSettings
    autocmd!
    " Set markdown indent style.
    autocmd FileType markdown set tabstop=4 shiftwidth=4
    " Disable AutoRemoveTrailingSpaces.
    autocmd FileType markdown autocmd! AutoRemoveTrailingSpaces
  augroup END
'''

[[plugins]]
repo = 'kannokanno/previm'
depends = ['open-browser.vim']
on_cmd = 'PrevimOpen'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent><Leader>p :<C-u>PrevimOpen<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'ujihisa/neco-look'
on_source = 'deoplete.nvim'

[[plugins]]
repo = 'koron/codic-vim'

[[plugins]]
repo = 'rhysd/unite-codic.vim'
hook_add = '''
  " Plugin key-mappings.
  nnoremap <silent>[unite]C  :<C-u>Unite codic<CR>
'''

[[plugins]]
repo = 'rhysd/vim-grammarous'

[[plugins]]
repo = 'rhysd/github-complete.vim'
hook_add = '''
  " Use neocomplete.
  let g:github_complete_enable_neocomplete = 1
'''

[[plugins]]
repo = 'kakkyz81/evervim'
build = 'pip install markdown'
hook_add = '''
  " Set Evernote developer token.
  let g:evervim_devtoken = ''
  " The prefix key.
  nnoremap [evervim] <Nop>
  nmap     <Space>e  [evervim]
  " Plugin key-mappings.
  nnoremap <silent>[evervim]l :<C-u>EvervimNotebookList<CR>
  nnoremap <silent>[evervim]c :<C-u>EvervimCreateNote<CR>
  nnoremap         [evervim]s :<C-u>EvervimSearchByQuery<Space>
  " Set the work path.
  let g:evervim_workdir = expand('~/.cache/evervim')
'''

[[plugins]]
repo = 'darfink/vim-plist'

# Folding {{{1

# vim:set foldmethod=marker:
